// Generated by CoffeeScript 1.3.3
var MAP_NAMES, MAP_VALUES, Player, World, Zombie, fs;

fs = require('fs');

Zombie = require('./zombie');

Player = require('./player');

MAP_VALUES = [0, 1, 2, 3, 4, 5];

MAP_NAMES = {
  GRASS: 0,
  WALL: 2,
  DOOR: 3
};

World = (function() {

  function World(options) {
    this.player = new Player(0, 0, 'Timothy Teste');
    if (!options.file) {
      this.size = options.size || {
        x: 80,
        y: 24
      };
      this.initMap();
    } else {
      this.loadMap(options.file);
    }
    this.spawnZombies();
  }

  World.prototype.loadMap = function(file) {
    var info;
    info = JSON.parse(fs.readFileSync(file));
    this.name = info.name;
    this.description = info.description;
    this.mapData = info.mapData;
    return this.size = {
      x: this.mapData[0].length,
      y: this.mapData.length
    };
  };

  World.prototype.initMap = function() {
    var x, y, _i, _j, _ref, _ref1;
    this.mapData = [];
    for (x = _i = 0, _ref = this.size.x; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      this.mapData[x] = [];
      for (y = _j = 0, _ref1 = this.size.y; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        this.mapData[x][y] = MAP_NAMES.GRASS;
      }
    }
    return this.generateRooms();
  };

  World.prototype.generateRooms = function() {
    var i, room, x, y, _i, _j, _ref, _ref1, _results;
    _results = [];
    for (i = _i = 0; _i <= 4; i = ++_i) {
      room = {
        location: this.randomLocation(),
        width: Math.floor(Math.random() * 8) + 4,
        height: Math.floor(Math.random() * 8) + 4
      };
      if (room.location.x + room.width > this.size.x) {
        room.location.x -= room.width;
      }
      if (room.location.y + room.height > this.size.y) {
        room.location.y -= room.height;
      }
      for (x = _j = _ref = room.location.x, _ref1 = room.location.x + room.width; _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = _ref <= _ref1 ? ++_j : --_j) {
        this.mapData[x][room.location.y] = MAP_NAMES.WALL;
        this.mapData[x][room.location.y + room.height] = MAP_NAMES.WALL;
      }
      _results.push((function() {
        var _k, _ref2, _ref3, _results1;
        _results1 = [];
        for (y = _k = _ref2 = room.location.y, _ref3 = room.location.y + room.height; _ref2 <= _ref3 ? _k <= _ref3 : _k >= _ref3; y = _ref2 <= _ref3 ? ++_k : --_k) {
          this.mapData[room.location.x][y] = MAP_NAMES.WALL;
          _results1.push(this.mapData[room.location.x + room.width][y] = MAP_NAMES.WALL);
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  World.prototype.randomizeMap = function() {
    var x, y, _i, _ref, _results;
    this.mapData = [];
    _results = [];
    for (x = _i = 0, _ref = this.size.x; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      this.mapData[x] = [];
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (y = _j = 0, _ref1 = this.size.y; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          _results1.push(this.mapData[x][y] = this.randomMapValue());
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  World.prototype.randomLocation = function() {
    var location;
    return location = {
      x: Math.floor(Math.random() * this.size.x),
      y: Math.floor(Math.random() * this.size.y)
    };
  };

  World.prototype.randomMapValue = function() {
    var index, plainSpawn;
    plainSpawn = Math.random() * 5 > 2;
    if (plainSpawn) {
      return 0;
    }
    index = Math.floor(Math.random() * MAP_VALUES.length);
    return MAP_VALUES[index];
  };

  World.prototype.spawnZombies = function() {
    var i, _i, _results;
    this.zombies = [];
    _results = [];
    for (i = _i = 0; _i <= 10; i = ++_i) {
      _results.push(this.spawnZombie());
    }
    return _results;
  };

  World.prototype.spawnZombie = function() {
    var location, zombie;
    location = this.randomLocation();
    zombie = new Zombie(location.x, location.y);
    return this.zombies.push(zombie);
  };

  World.prototype.updateZombies = function() {
    var delta, zombie, _i, _len, _ref, _results;
    _ref = this.zombies;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      zombie = _ref[_i];
      delta = {
        x: Math.abs(this.player.pos.x - zombie.pos.x),
        y: Math.abs(this.player.pos.y - zombie.pos.y)
      };
      if (delta.x > delta.y) {
        if (this.player.pos.x > zombie.pos.x) {
          zombie.pos.x++;
        } else if (this.player.pos.x < zombie.pos.x) {
          zombie.pos.x--;
        }
      } else {
        if (this.player.pos.y > zombie.pos.y) {
          zombie.pos.y++;
        } else if (this.player.pos.y < zombie.pos.y) {
          zombie.pos.y--;
        }
      }
      if ((delta.x === 1 && delta.y === 0) || (delta.x === 0 && delta.y === 1)) {
        _results.push(zombie.attack(this.player));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  World.prototype.completedTurn = function() {
    return this.updateZombies();
  };

  return World;

})();

module.exports = World;
