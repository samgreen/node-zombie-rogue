// Generated by CoffeeScript 1.3.3
var COLOR_MAP, Charm, INPUT, SYMBOL_MAP, TerminalClient,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Charm = require('charm');

SYMBOL_MAP = {
  0: '░',
  1: '+',
  2: '#',
  3: '▁',
  4: '^',
  5: '*',
  '░': '░',
  '▛': '▛',
  '▀': '▀',
  '▜': '▜',
  '▌': '▌',
  '▐': '▐',
  '▙': '▙',
  '▄': '▄',
  '▟': '▟',
  Z: 'Z',
  P: '@'
};

COLOR_MAP = {
  '▛': {
    fore: 'white',
    back: 'green'
  },
  '▀': {
    fore: 'white',
    back: 'green'
  },
  '▜': {
    fore: 'white',
    back: 'green'
  },
  '▌': {
    fore: 'white',
    back: 'green'
  },
  '▐': {
    fore: 'white',
    back: 'green'
  },
  '▙': {
    fore: 'white',
    back: 'green'
  },
  '▄': {
    fore: 'white',
    back: 'green'
  },
  '▟': {
    fore: 'white',
    back: 'green'
  },
  '░': {
    fore: 'white',
    back: 'green'
  },
  0: {
    fore: 'white',
    back: 'green'
  },
  1: {
    fore: 'white',
    back: 'green'
  },
  2: {
    fore: 'white',
    back: 'black'
  },
  3: {
    fore: 'white',
    back: 'green'
  },
  4: {
    fore: 'white',
    back: 'green'
  },
  5: {
    fore: 'white',
    back: 'green'
  },
  Z: {
    fore: 'red',
    back: 'black'
  },
  P: {
    fore: 'yellow',
    back: 'black'
  }
};

INPUT = {
  UP: 65,
  DOWN: 66,
  RIGHT: 67,
  LEFT: 68
};

TerminalClient = (function() {

  function TerminalClient(world) {
    this.world = world;
    this.handleInput = __bind(this.handleInput, this);

    this.charm = new Charm(process);
    this.charm.on('^C', process.exit);
    this.charm.cursor(false);
    this.mapOffset = {
      x: 0,
      y: 0
    };
    process.stdin.on('data', this.handleInput);
    this.redraw();
  }

  TerminalClient.prototype.handleInput = function(chunk) {
    var keycode, startPos;
    startPos = {
      x: this.world.player.pos.x,
      y: this.world.player.pos.y
    };
    keycode = chunk[2];
    if (keycode === INPUT.UP) {
      this.world.player.pos.y--;
    } else if (keycode === INPUT.DOWN) {
      this.world.player.pos.y++;
    } else if (keycode === INPUT.LEFT) {
      this.world.player.pos.x--;
    } else if (keycode === INPUT.RIGHT) {
      this.world.player.pos.x++;
    }
    if (!(this.world.player.pos.x === startPos.x && this.world.player.pos.y === startPos.y)) {
      this.world.completedTurn();
      return this.redraw();
    }
  };

  TerminalClient.prototype.redraw = function(tileX, tileY) {
    var mapValue, pos;
    if (!(tileX && tileY)) {
      this.drawWorld();
      this.drawZombies();
      this.drawPlayer();
    } else {
      pos = {
        x: tileX,
        y: tileY
      };
      mapValue = this.world.mapData[pos.x][pos.y];
      this.writeMappedSymbol(mapValue, pos);
    }
    return this.drawStats();
  };

  TerminalClient.prototype.drawWorld = function() {
    var col, map, mapValue, pos, x, y, _i, _len, _results;
    map = this.world.mapData;
    _results = [];
    for (y = _i = 0, _len = map.length; _i < _len; y = ++_i) {
      col = map[y];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (x = _j = 0, _len1 = col.length; _j < _len1; x = ++_j) {
          mapValue = col[x];
          pos = {
            x: x,
            y: y
          };
          _results1.push(this.writeMappedSymbol(mapValue, pos));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  TerminalClient.prototype.drawZombies = function() {
    var zombie, zombies, _i, _len, _results;
    zombies = this.world.zombies;
    _results = [];
    for (_i = 0, _len = zombies.length; _i < _len; _i++) {
      zombie = zombies[_i];
      _results.push(this.writeMappedSymbol('Z', zombie.pos));
    }
    return _results;
  };

  TerminalClient.prototype.drawStats = function() {
    var healthString, nameString, player, x;
    x = 0;
    player = this.world.player;
    nameString = "Name: " + player.name + " ";
    this.charm.position(x, this.world.size.y + 1);
    this.charm.background('black');
    this.charm.foreground('white');
    this.charm.write(nameString);
    x += nameString.length;
    healthString = " Health: " + player.health + " ";
    this.charm.position(this.world.size.x - healthString.length + 1, this.world.size.y + 1);
    this.charm.foreground('red');
    this.charm.background('black');
    return this.charm.write(healthString);
  };

  TerminalClient.prototype.drawPlayer = function(pos) {
    if (pos == null) {
      pos = this.world.player.pos;
    }
    this.charm.display('bright');
    this.writeSymbol('@', pos, 'yellow', this.getBackgroundColor(this.world.mapData[pos.x][pos.y]));
    return this.charm.display('reset');
  };

  TerminalClient.prototype.getSymbol = function(mapValue) {
    return SYMBOL_MAP[mapValue];
  };

  TerminalClient.prototype.getBackgroundColor = function(mapValue) {
    return COLOR_MAP[mapValue].back;
  };

  TerminalClient.prototype.getForegroundColor = function(mapValue) {
    return COLOR_MAP[mapValue].fore;
  };

  TerminalClient.prototype.writeMappedSymbol = function(mapValue, pos) {
    var back, fore, symbol;
    symbol = this.getSymbol(mapValue);
    fore = this.getForegroundColor(mapValue);
    back = this.getBackgroundColor(mapValue);
    return this.writeSymbol(symbol, pos, fore, back);
  };

  TerminalClient.prototype.writeSymbol = function(symbol, pos, foreground, background) {
    this.charm.position(pos.x + this.mapOffset.x, pos.y + this.mapOffset.y);
    this.charm.background(background);
    this.charm.foreground(foreground);
    return this.charm.write(symbol);
  };

  return TerminalClient;

})();

module.exports = TerminalClient;
